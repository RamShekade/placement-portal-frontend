import React, { useState } from "react";
import * as XLSX from 'xlsx';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import CollegeHeader from "../../shared/CollegeHeader";
import "./ViewApplicants.css";

const applicantsData = {
  "Python Developer - TCS": [
    { name: "Ashitosh Sabale", email: "ashitosh@example.com", branch: "IT", cgpa: "8.04", status: "Sorry to say" },
    { name: "Neha Sharma", email: "neha@example.com", branch: "Comp", cgpa: "8.9", status: "Selected" },
    { name: "Ravi Mehta", email: "ravi@example.com", branch: "IT", cgpa: "7.5", status: "Rejected" },
    { name: "Kshitij Sharma", email: "rohit@example.com", branch: "IT", cgpa: "9.2", status: "Selected" },
  ],
  "Frontend Engineer - TCS": [
    { name: "Priya Sharma", email: "priya@example.com", branch: "IT", cgpa: "8.8", status: "Selected" },
    { name: "Kunal Desai", email: "kunal@example.com", branch: "Comp", cgpa: "7.8", status: "Under Review" },
    { name: "Sneha Gupta", email: "sneha@example.com", branch: "IT", cgpa: "8.4", status: "Rejected" },
  ],
  "Backend Engineer - TCS": [
    { name: "Rohit Nair", email: "rohit@example.com", branch: "IT", cgpa: "8.2", status: "Selected" },
    { name: "Megha Jain", email: "megha@example.com", branch: "Comp", cgpa: "9.1", status: "Under Review" },
    { name: "Harsh Vora", email: "harsh@example.com", branch: "IT", cgpa: "7.7", status: "Rejected" },
  ],
  "Full Stack Developer - TCS": [
    { name: "Tanvi Singh", email: "tanvi@example.com", branch: "Comp", cgpa: "8.7", status: "Under Review" },
    { name: "Jay Shah", email: "jay@example.com", branch: "IT", cgpa: "8.3", status: "Selected" },
    { name: "Divya Raj", email: "divya@example.com", branch: "Comp", cgpa: "7.9", status: "Rejected" },
  ],
};

const ViewApplicants = () => {
  const [selectedRole, setSelectedRole] = useState(null);
  const [showExportOptions, setShowExportOptions] = useState(false);

  const handleRoleClick = (role) => {
    setSelectedRole(role);
  };

  const getCurrentDateTime = () => {
    return "2025-06-30 10:49:17";
  };

  const getCurrentUser = () => {
    return "kshitij-dmce";
  };

  const exportToExcel = () => {
    if (!selectedRole) return;

    try {
      const data = applicantsData[selectedRole];
      
      // Create header data
      const headerData = [
        ['📊 APPLICANTS REPORT'],
        [''],
        ['Position:', selectedRole],
        ['Generated By:', getCurrentUser()],
        ['Generated On:', getCurrentDateTime()],
        ['Total Applicants:', data.length],
        ['Selected:', data.filter(app => app.status === "Selected").length],
        ['Under Review:', data.filter(app => app.status === "Under Review").length],
        ['Rejected:', data.filter(app => app.status === "Rejected").length],
        [''],
        ['Name', 'Email', 'Branch', 'CGPA', 'Status']
      ];

      // Create workbook and worksheet
      const wb = XLSX.utils.book_new();
      const ws = XLSX.utils.aoa_to_sheet(headerData);
      
      // Add applicant data starting from row 12
      XLSX.utils.sheet_add_json(ws, data.map(applicant => ({
        'Name': applicant.name,
        'Email': applicant.email,
        'Branch': applicant.branch,
        'CGPA': applicant.cgpa,
        'Status': applicant.status
      })), { origin: 'A12', skipHeader: false });

      // Style the header row
      const range = XLSX.utils.decode_range(ws['!ref']);
      ws['!cols'] = [
        { wch: 20 }, // Name
        { wch: 30 }, // Email
        { wch: 10 }, // Branch
        { wch: 8 },  // CGPA
        { wch: 15 }  // Status
      ];

      XLSX.utils.book_append_sheet(wb, ws, 'Applicants Report');
      
      const fileName = `${selectedRole.replace(/[^a-zA-Z0-9]/g, '_')}_Applicants_${getCurrentDateTime().replace(/[: -]/g, '')}.xlsx`;
      XLSX.writeFile(wb, fileName);
      
      setShowExportOptions(false);
      console.log(`📊 Excel exported successfully: ${fileName} at ${getCurrentDateTime()} by ${getCurrentUser()}`);
      
    } catch (error) {
      console.error('❌ Excel export failed:', error);
      alert('Failed to export Excel file. Please try again.');
    }
  };

  const exportToPDF = () => {
    if (!selectedRole) return;

    try {
      const data = applicantsData[selectedRole];
      const doc = new jsPDF();

      // Set document properties
      doc.setProperties({
        title: `Applicants Report - ${selectedRole}`,
        creator: getCurrentUser(),
        creationDate: new Date(),
        subject: 'Job Application Status Report'
      });

      // Header section with proper text title (no emojis)
      doc.setFontSize(24);
      doc.setTextColor(30, 30, 63);
      doc.setFont("helvetica", "bold");
      doc.text('APPLICANTS REPORT', 105, 25, { align: 'center' });

      // Add subtitle
      doc.setFontSize(14);
      doc.setFont("helvetica", "normal");
      doc.setTextColor(100, 100, 100);
      doc.text('Job Application Status Analysis', 105, 35, { align: 'center' });

      // Add decorative line
      doc.setLineWidth(1.5);
      doc.setDrawColor(30, 30, 63);
      doc.line(20, 42, 190, 42);

      // Report metadata section
      doc.setFontSize(12);
      doc.setTextColor(0, 0, 0);
      doc.setFont("helvetica", "normal");
      
      // Left column
      doc.text(`Position: ${selectedRole}`, 20, 55);
      doc.text(`Generated By: ${getCurrentUser()}`, 20, 63);
      doc.text(`Generated On: ${getCurrentDateTime()}`, 20, 71);
      doc.text(`Total Applicants: ${data.length}`, 20, 79);
      
      // Right column statistics
      doc.text(`Selected: ${data.filter(app => app.status === "Selected").length}`, 110, 79);
      doc.text(`Under Review: ${data.filter(app => app.status === "Under Review").length}`, 20, 87);
      doc.text(`Rejected: ${data.filter(app => app.status === "Rejected").length}`, 110, 87);

      // Add another decorative line before table
      doc.setLineWidth(0.5);
      doc.setDrawColor(200, 200, 200);
      doc.line(20, 95, 190, 95);

      // Prepare table data
      const tableData = data.map(applicant => [
        applicant.name,
        applicant.email,
        applicant.branch,
        applicant.cgpa,
        applicant.status
      ]);

      // Create table with enhanced styling and improved width
      autoTable(doc, {
        head: [['Name', 'Email', 'Branch', 'CGPA', 'Status']],
        body: tableData,
        startY: 102,
        margin: { top: 102, left: 15, right: 15 }, // Reduced margins
        headStyles: {
          fillColor: [30, 30, 63],
          textColor: [255, 255, 255],
          fontSize: 11,
          fontStyle: 'bold',
          halign: 'center',
          valign: 'middle'
        },
        bodyStyles: {
          fontSize: 10,
          textColor: [0, 0, 0],
          halign: 'left',
          valign: 'middle'
        },
        alternateRowStyles: {
          fillColor: [248, 250, 252]
        },
        columnStyles: {
          0: { cellWidth: 40, halign: 'left' },   // Name - increased
          1: { cellWidth: 60, halign: 'left' },   // Email - increased
          2: { cellWidth: 30, halign: 'center' }, // Branch - increased
          3: { cellWidth: 22, halign: 'center' }, // CGPA - increased
          4: { cellWidth: 28, halign: 'center' }  // Status - increased
        },
        styles: {
          lineColor: [200, 200, 200],
          lineWidth: 0.1,
          cellPadding: 4
        },
        tableWidth: 'auto', // Let table use full available width
        didParseCell: function (data) {
          // Color code status cells
          if (data.column.index === 4 && data.section === 'body') {
            const status = data.cell.text[0];
            if (status === 'Selected') {
              data.cell.styles.fillColor = [220, 252, 231];
              data.cell.styles.textColor = [22, 101, 52];
              data.cell.styles.fontStyle = 'bold';
            } else if (status === 'Rejected') {
              data.cell.styles.fillColor = [254, 242, 242];
              data.cell.styles.textColor = [220, 38, 38];
              data.cell.styles.fontStyle = 'bold';
            } else if (status === 'Under Review') {
              data.cell.styles.fillColor = [254, 243, 199];
              data.cell.styles.textColor = [217, 119, 6];
              data.cell.styles.fontStyle = 'bold';
            }
          }
        }
      });

      // Add footer with page numbers and generation info
      const pageCount = doc.internal.getNumberOfPages();
      for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i);
        doc.setFontSize(8);
        doc.setTextColor(128, 128, 128);
        doc.setFont("helvetica", "normal");
        
        // Page number
        doc.text(`Page ${i} of ${pageCount}`, 105, 285, { align: 'center' });
        
        // Generation info
        doc.text(`Generated by ${getCurrentUser()} on ${getCurrentDateTime()}`, 105, 292, { align: 'center' });
        
        // Add border around the entire page
        doc.setDrawColor(200, 200, 200);
        doc.setLineWidth(0.5);
        doc.rect(12, 12, 186, 271); // Adjusted for better fit
      }

      const fileName = `${selectedRole.replace(/[^a-zA-Z0-9]/g, '_')}_Applicants_${getCurrentDateTime().replace(/[: -]/g, '')}.pdf`;
      doc.save(fileName);
      
      setShowExportOptions(false);
      console.log(`📄 PDF exported successfully: ${fileName} at ${getCurrentDateTime()} by ${getCurrentUser()}`);
      
    } catch (error) {
      console.error('❌ PDF export failed:', error);
      console.error('Error details:', error.message);
      alert('Failed to export PDF file. Please check console for details.');
    }
  };

  const handleExportClick = () => {
    setShowExportOptions(!showExportOptions);
  };

  const getTotalApplicants = () => {
    return Object.values(applicantsData).reduce((total, applicants) => total + applicants.length, 0);
  };

  const getSelectedCount = () => {
    return Object.values(applicantsData).reduce((total, applicants) => {
      return total + applicants.filter(app => app.status === "Selected").length;
    }, 0);
  };

  const getUnderReviewCount = () => {
    return Object.values(applicantsData).reduce((total, applicants) => {
      return total + applicants.filter(app => app.status === "Under Review").length;
    }, 0);
  };

  const getStatusClass = (status) => {
    switch (status) {
      case "Selected":
        return "applicant-status-selected";
      case "Rejected":
        return "applicant-status-rejected";
      case "Under Review":
        return "applicant-status-under-review";
      default:
        return "applicant-status-default";
    }
  };

  // Close export dropdown when clicking outside
  React.useEffect(() => {
    const handleClickOutside = (event) => {
      if (showExportOptions && !event.target.closest('.applicant-export-dropdown')) {
        setShowExportOptions(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [showExportOptions]);

  return (
    <div className="applicant-dashboard-page">
      <CollegeHeader />
      
      <div className="applicant-main-container">
        <div className="applicant-page-header">
          <h1 className="applicant-page-title">📋 View Applicants by Role</h1>
          <p className="applicant-page-subtitle">Manage and review job applications across different positions</p>
          
          <div className="applicant-stats-grid">
            <div className="applicant-stat-card applicant-total-stat">
              <div className="applicant-stat-icon">👥</div>
              <div className="applicant-stat-content">
                <div className="applicant-stat-number">{getTotalApplicants()}</div>
                <div className="applicant-stat-label">Total Applicants</div>
              </div>
            </div>
            
            <div className="applicant-stat-card applicant-selected-stat">
              <div className="applicant-stat-icon">✅</div>
              <div className="applicant-stat-content">
                <div className="applicant-stat-number">{getSelectedCount()}</div>
                <div className="applicant-stat-label">Selected</div>
              </div>
            </div>
            
            <div className="applicant-stat-card applicant-review-stat">
              <div className="applicant-stat-icon">🔄</div>
              <div className="applicant-stat-content">
                <div className="applicant-stat-number">{getUnderReviewCount()}</div>
                <div className="applicant-stat-label">Under Review</div>
              </div>
            </div>
          </div>
        </div>

        <div className="applicant-positions-section">
          <h3 className="applicant-section-title">🎯 Available Positions</h3>
          <div className="applicant-positions-grid">
            {Object.keys(applicantsData).map((role) => (
              <div
                key={role}
                className={`applicant-position-card ${selectedRole === role ? "applicant-position-active" : ""}`}
                onClick={() => handleRoleClick(role)}
              >
                
                <div className="applicant-position-content">
                  <div className="applicant-position-title">{role.split(" - ")[0]}</div>
                  <div className="applicant-position-company">{role.split(" - ")[1]}</div>
                  <div className="applicant-position-stats">
                    <span className="applicant-applicant-count">
                      {applicantsData[role].length} applicant{applicantsData[role].length !== 1 ? 's' : ''}
                    </span>
                    <span className="applicant-selected-count">
                      {applicantsData[role].filter(app => app.status === "Selected").length} selected
                    </span>
                  </div>
                </div>
                <div className="applicant-position-arrow">
                  <span>→</span>
                </div>
              </div>
            ))}
          </div>
        </div>

        {selectedRole && (
          <div className="applicant-applicants-section">
            <div className="applicant-table-header">
              <h3 className="applicant-table-title">📊 Applicants for {selectedRole}</h3>
              <div className="applicant-table-actions">
                <div className="applicant-export-dropdown">
                  <button 
                    className="applicant-export-btn" 
                    onClick={handleExportClick}
                  >
                    📥 Export Data
                  </button>
                  {showExportOptions && (
                    <div className="applicant-export-options">
                      <button onClick={exportToExcel} className="applicant-export-option">
                        📊 Export to Excel
                      </button>
                      <button onClick={exportToPDF} className="applicant-export-option">
                        📄 Export to PDF
                      </button>
                    </div>
                  )}
                </div>
              </div>
            </div>
            
            <div className="applicant-table-container">
              <table className="applicant-applicants-table">
                <thead>
                  <tr>
                    <th>👤 Name</th>
                    <th>📧 Email</th>
                    <th>🎓 Branch</th>
                    <th>📊 CGPA</th>
                    <th>📋 Status</th>
                  </tr>
                </thead>
                <tbody>
                  {applicantsData[selectedRole].map((applicant, index) => (
                    <tr key={index} className="applicant-applicant-row">
                      <td className="applicant-name-cell">
                        <div className="applicant-name-avatar">
                          {applicant.name.split(' ').map(n => n[0]).join('')}
                        </div>
                        <span className="applicant-name-text">{applicant.name}</span>
                      </td>
                      <td className="applicant-email-cell">{applicant.email}</td>
                      <td className="applicant-branch-cell">
                        <span className="applicant-branch-badge">{applicant.branch}</span>
                      </td>
                      <td className="applicant-cgpa-cell">{applicant.cgpa}</td>
                      <td className="applicant-status-cell">
                        <span className={`applicant-status-badge ${getStatusClass(applicant.status)}`}>
                          {applicant.status}
                        </span>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
            
            <div className="applicant-table-footer">
              <div className="applicant-footer-info">
                <span className="applicant-last-updated">
                  Last updated: {getCurrentDateTime()} by {getCurrentUser()}
                </span>
              </div>
            </div>
          </div>
        )}

        {!selectedRole && (
          <div className="applicant-empty-state">
            <div className="applicant-empty-icon">🎯</div>
            <h3 className="applicant-empty-title">Select a Position</h3>
            <p className="applicant-empty-description">
              Choose a job position from the list above to view applicants and their details.
            </p>
          </div>
        )}
      </div>
    </div>
  );
};

export default ViewApplicants;